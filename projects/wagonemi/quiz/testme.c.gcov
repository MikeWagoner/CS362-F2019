        -:    0:Source:testme.c
        -:    0:Graph:testme.gcno
        -:    0:Data:testme.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include<stdio.h>
        -:    2:#include<string.h>
        -:    3:#include<stdlib.h>
        -:    4:#include<time.h>
        -:    5:
function inputChar called 1335 returned 100% blocks executed 100%
     1335:    6:char inputChar()
        -:    7:{
     1335:    8:    char rand_char = rand() % 128; //set char to any ASCII value
call    0 returned 100%
     1335:    9:    return rand_char;
        -:   10:}
        -:   11:
function inputString called 1335 returned 100% blocks executed 100%
     1335:   12:char *inputString()
        -:   13:{
     1335:   14:    int length = 6; //string length 
        -:   15:    char *rand_str;
     1335:   16:    rand_str = (char *)malloc(sizeof(char)*length);
        -:   17:    //Goes through and calls inputChar to fill out each char in the string
     1335:   18:    char terminator_chars[5] = "reset";
     8010:   19:    for(int i = 0; i < length-1; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     6675:   20:        rand_str[i] = terminator_chars[rand() % 5];
call    0 returned 100%
        -:   21:    }
     1335:   22:    rand_str[length-1] = '\0';
     1335:   23:    return rand_str;
        -:   24:}
        -:   25:
function testme called 1 returned 0% blocks executed 100%
        1:   26:void testme()
        -:   27:{
        1:   28:  int tcCount = 0;
        -:   29:  char *s;
        -:   30:  char c;
        1:   31:  int state = 0;
        -:   32:  while (1)
        -:   33:  {
     1335:   34:    tcCount++;
     1335:   35:    c = inputChar();
call    0 returned 100%
     1335:   36:    s = inputString();
call    0 returned 100%
     1335:   37:    printf("Iteration %d: c = %c, s = %s, state = %d\n", tcCount, c, s, state);
call    0 returned 100%
        -:   38:
     1335:   39:    if (c == '[' && state == 0) state = 1;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 14% (fallthrough)
branch  3 taken 86%
     1335:   40:    if (c == '(' && state == 1) state = 2;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
     1335:   41:    if (c == '{' && state == 2) state = 3;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 6% (fallthrough)
branch  3 taken 94%
     1335:   42:    if (c == ' '&& state == 3) state = 4;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 9% (fallthrough)
branch  3 taken 91%
     1335:   43:    if (c == 'a' && state == 4) state = 5;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
     1335:   44:    if (c == 'x' && state == 5) state = 6;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
     1335:   45:    if (c == '}' && state == 6) state = 7;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
     1335:   46:    if (c == ')' && state == 7) state = 8;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
     1335:   47:    if (c == ']' && state == 8) state = 9;
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
branch  2 taken 14% (fallthrough)
branch  3 taken 86%
     1335:   48:    if (s[0] == 'r' && s[1] == 'e'
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
branch  2 taken 38% (fallthrough)
branch  3 taken 62%
      102:   49:       && s[2] == 's' && s[3] == 'e'
branch  0 taken 22% (fallthrough)
branch  1 taken 78%
branch  2 taken 41% (fallthrough)
branch  3 taken 59%
        9:   50:       && s[4] == 't' && s[5] == '\0'
branch  0 taken 44% (fallthrough)
branch  1 taken 56%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        4:   51:       && state == 9)
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:   52:    {
        1:   53:      printf("error ");
call    0 returned 100%
        1:   54:      exit(200);
call    0 returned 0%
        -:   55:    }
     1334:   56:  }
        -:   57:}
        -:   58:
        -:   59:
function main called 1 returned 0% blocks executed 80%
        1:   60:int main(int argc, char *argv[])
        -:   61:{
        1:   62:    srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        1:   63:    testme();
call    0 returned 0%
    #####:   64:    return 0;
        -:   65:}
